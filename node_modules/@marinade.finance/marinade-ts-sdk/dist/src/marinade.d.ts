/// <reference types="bn.js" />
import { MarinadeConfig } from './config/marinade-config';
import { BN, ProgramAccount, Provider, web3 } from '@coral-xyz/anchor';
import { MarinadeState } from './marinade-state/marinade-state';
import { DepositOptions, DepositStakeAccountOptions, MarinadeResult, ValidatorStats } from './marinade.types';
import { MarinadeFinanceProgram } from './programs/marinade-finance-program';
import { MarinadeReferralProgram } from './programs/marinade-referral-program';
import { MarinadeReferralPartnerState } from './marinade-referral-state/marinade-referral-partner-state';
import { MarinadeReferralGlobalState } from './marinade-referral-state/marinade-referral-global-state';
import { TicketAccount } from './marinade-state/borsh/ticket-account';
import { ParsedStakeAccountInfo } from './util';
import { DirectedStakeVoteRecord } from '@marinade.finance/directed-stake-sdk';
export declare class Marinade {
    readonly config: MarinadeConfig;
    constructor(config?: MarinadeConfig);
    readonly provider: Provider;
    private directedStakeSdk;
    /**
     * The main Marinade Program
     */
    readonly marinadeFinanceProgram: MarinadeFinanceProgram;
    /**
     * The Marinade Program for referral partners
     */
    readonly marinadeReferralProgram: MarinadeReferralProgram;
    private isReferralProgram;
    private provideReferralOrMainProgram;
    /**
     * Fetch the Marinade's internal state
     */
    getMarinadeState(): Promise<MarinadeState>;
    /**
     * Fetch the Marinade referral partner's state
     */
    getReferralPartnerState(referralCode?: web3.PublicKey): Promise<MarinadeReferralPartnerState>;
    /**
     * Fetch the Marinade referral program's global state
     */
    getReferralGlobalState(): Promise<MarinadeReferralGlobalState>;
    /**
     * Fetch all the referral partners
     */
    getReferralPartners(): Promise<MarinadeReferralPartnerState[]>;
    /**
     * Fetches the voteRecord of a given user
     *
     * @param {web3.PublicKey} userPublicKey - The PublicKey of the user
     */
    getUsersVoteRecord(userPublicKey: web3.PublicKey): Promise<{
        voteRecord: ProgramAccount<DirectedStakeVoteRecord> | undefined;
        address: web3.PublicKey;
    }>;
    /**
     * Returns a transaction with the instructions to
     * Add liquidity to the liquidity pool and receive LP tokens
     *
     * @param {BN} amountLamports - The amount of lamports added to the liquidity pool
     */
    addLiquidity(amountLamports: BN): Promise<MarinadeResult.AddLiquidity>;
    /**
     * Returns a transaction with the instructions to
     * Burn LP tokens and get SOL and mSOL back from the liquidity pool
     *
     * @param {BN} amountLamports - The amount of LP tokens burned
     */
    removeLiquidity(amountLamports: BN): Promise<MarinadeResult.RemoveLiquidity>;
    /**
     * Creates necessary directed stake voting instructions for the specified validator.
     * If the vote address is left undefined the standard delegation strategy is used.
     *
     * @param {web3.PublicKey} validatorVoteAddress - The vote address to identify the validator
     */
    createDirectedStakeVoteIx(validatorVoteAddress?: web3.PublicKey): Promise<web3.TransactionInstruction | undefined>;
    /**
     * Returns a transaction with the instructions to
     * Stake SOL in exchange for mSOL
     *
     * @param {BN} amountLamports - The amount lamports staked
     * @param {DepositOptions} options - Additional deposit options
     */
    deposit(amountLamports: BN, options?: DepositOptions): Promise<MarinadeResult.Deposit>;
    /**
     * Returns a transaction with the instructions to
     * Swap your mSOL to get back SOL immediately using the liquidity pool
     *
     * @param {BN} amountLamports - The amount of mSOL exchanged for SOL
     */
    liquidUnstake(amountLamports: BN, associatedMSolTokenAccountAddress?: web3.PublicKey): Promise<MarinadeResult.LiquidUnstake>;
    /**
     * Returns a transaction with the instructions to
     * Deposit a delegated stake account.
     * Note that the stake must be fully activated and the validator must be known to Marinade
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {DepositStakeAccountOptions} options - Additional deposit options
     */
    depositStakeAccount(stakeAccountAddress: web3.PublicKey, options?: DepositStakeAccountOptions): Promise<MarinadeResult.DepositStakeAccount>;
    /**
     * @beta
     *
     * Returns a transaction with the instructions to
     * Deposit a deactivating stake account.
     * Note that the stake must be deactivating and the validator must be known to Marinade
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {DepositStakeAccountOptions} options - Additional deposit options
     */
    depositDeactivatingStakeAccount(stakeAccountAddress: web3.PublicKey, options?: DepositStakeAccountOptions): Promise<MarinadeResult.DepositDeactivatingStakeAccount>;
    /**
     * Returns a transaction with the instructions to
     * Deposit a delegated stake account.
     * Note that the stake must be fully activated and the validator must be known to Marinade
     *
     * @param {ParsedStakeAccountInfo} stakeAccountInfo - Parsed Stake Account info
     * @param {number} rent - Rent needed for a stake account
     * @param {MarinadeState} marinadeState - Marinade State needed for retrieving validator info
     * @param {DepositStakeAccountOptions} options - Additional deposit options
     */
    depositStakeAccountByAccount(stakeAccountInfo: ParsedStakeAccountInfo, rent: number, marinadeState: MarinadeState, options?: DepositStakeAccountOptions): Promise<MarinadeResult.DepositStakeAccount>;
    /**
     * @beta
     *
     * Generates a transaction to partially convert a fully activated delegated stake account into mSOL,
     * while the remaining balance continues to be staked in its native form.
     *
     * Requirements:
     * - The stake's validator should be recognized by Marinade.
     * - The transaction should be executed immediately after being generated.
     * - A minimum amount of 1 SOL is required for conversion to mSOL.
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {BN} solToKeep - Amount of SOL lamports to keep
     * @param {DepositStakeAccountOptions} options - Additional deposit options
     */
    partiallyDepositStakeAccount(stakeAccountAddress: web3.PublicKey, solToKeep: BN, options?: DepositStakeAccountOptions): Promise<MarinadeResult.PartiallyDepositStakeAccount>;
    /**
     * @beta
     *
     * Generates a transaction to convert an activating stake account into mSOL,
     * while the remaining balance continues to be staked in its native form.
     *
     * Requirements:
     * - The stake's validator should be recognized by Marinade.
     * - The transaction should be executed immediately after being generated.
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {BN} solToKeep - Amount of SOL lamports to keep as a stake account
     * @param {DepositStakeAccountOptions} options - Additional deposit options
     */
    depositActivatingStakeAccount(stakeAccountAddress: web3.PublicKey, solToKeep: BN, options?: DepositStakeAccountOptions): Promise<MarinadeResult.PartiallyDepositStakeAccount>;
    /**
     * Returns a transaction with the instructions to
     * Liquidate a delegated stake account.
     * Note that the stake must be fully activated and the validator must be known to Marinade
     * and that the transaction should be executed immediately after creation.
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {BN} mSolToKeep - Optional amount of mSOL lamports to keep
     */
    liquidateStakeAccount(stakeAccountAddress: web3.PublicKey, mSolToKeep?: BN): Promise<MarinadeResult.LiquidateStakeAccount>;
    /**
     * @beta
     *
     * Returns a transaction with the instructions to
     * Partially liquidate a delegated stake account, while the rest remains staked natively.
     * Note that the stake must be fully activated and the validator must be known to Marinade
     * and that the transaction should be executed immediately after creation.
     *
     * @param {web3.PublicKey} stakeAccountAddress - The account to be deposited
     * @param {BN} solToKeep - Amount of SOL lamports to keep
     */
    partiallyLiquidateStakeAccount(stakeAccountAddress: web3.PublicKey, solToKeep: BN): Promise<MarinadeResult.PartiallyDepositStakeAccount>;
    /**
     * Retrieve user's ticket accounts
     *
     * @param {web3.PublicKey} beneficiary - The owner of the ticket accounts
     */
    getDelayedUnstakeTickets(beneficiary: web3.PublicKey): Promise<Map<web3.PublicKey, TicketAccount>>;
    /**
     * Returns estimated Due date for an unstake ticket created now
     *
     */
    getEstimatedUnstakeTicketDueDate(): Promise<import("./util/ticket-date-info.types").TicketDateInfo>;
    /**
     * Returns a transaction with the instructions to
     * Order Unstake to create a ticket which can be claimed later (with {@link claim}).
     *
     * @param {BN} msolAmount - The amount of mSOL in lamports to order for unstaking
     */
    orderUnstake(msolAmount: BN): Promise<MarinadeResult.OrderUnstake>;
    /**
     * Returns a transaction with the instructions to
     * claim a ticket (created by {@link orderUnstake} beforehand).
     * Claimed SOLs will be sent to {@link MarinadeConfig.publicKey}.
     *
     * @param {web3.PublicKey} ticketAccount - Address of the ticket account for SOLs being claimed from
     */
    claim(ticketAccount: web3.PublicKey): Promise<MarinadeResult.Claim>;
    /**
     * @beta
     *
     * Returns a transaction with the instructions to
     * Deposit an amount of stake pool tokens.
     *
     * This method is in beta stage. It may be changed or removed in future versions.
     *
     * @param {web3.PublicKey} stakePoolTokenAddress - The stake pool token account to be deposited
     * @param {number} amountToDeposit - Amount to deposit
     * @param {ValidatorStats[]} validators - List of validators to prio where to take the stake from
     */
    depositStakePoolToken(stakePoolTokenAddress: web3.PublicKey, amountToDeposit: number, validators: ValidatorStats[], options?: DepositOptions): Promise<MarinadeResult.LiquidateStakePoolToken>;
    /**
     * @beta
     *
     * Returns a transaction with the instructions to
     * Liquidate an amount of stake pool tokens.
     *
     * This method is in beta stage. It may be changed or removed in future versions.
     *
     * @param {web3.PublicKey} stakePoolTokenAddress - The stake pool token account to be liquidated
     * @param {number} amountToLiquidate - Amount to liquidate
     * @param {ValidatorStats[]} validators - List of validators to prio where to take the stake from
     */
    liquidateStakePoolToken(stakePoolTokenAddress: web3.PublicKey, amountToLiquidate: number, validators: ValidatorStats[]): Promise<MarinadeResult.LiquidateStakePoolToken>;
}
