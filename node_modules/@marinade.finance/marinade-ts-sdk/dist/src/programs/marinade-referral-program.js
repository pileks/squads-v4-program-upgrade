"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarinadeReferralProgram = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const spl_token_3_x_1 = require("@solana/spl-token-3.x");
const util_1 = require("../util");
const assert_1 = require("../util/assert");
const mariandeReferral = __importStar(require("./idl/types/marinade_referral"));
const MarinadeReferralIDL = mariandeReferral.IDL;
class MarinadeReferralProgram {
    constructor(programAddress, anchorProvider, referralState, marinade) {
        this.programAddress = programAddress;
        this.anchorProvider = anchorProvider;
        this.referralState = referralState;
        this.marinade = marinade;
        this.referralStateData = null;
        this.liquidUnstakeInstructionBuilder = ({ marinadeState, ownerAddress, associatedMSolTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .liquidUnstake(amountLamports)
                .accountsStrict({
                marinadeFinanceProgram: marinadeState.marinadeFinanceProgramId,
                state: marinadeState.marinadeStateAddress,
                referralState: (0, assert_1.assertNotNullAndReturn)(this.referralState, 'The referral code must be provided!'),
                msolMint: marinadeState.mSolMintAddress,
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                getMsolFrom: associatedMSolTokenAccountAddress,
                getMsolFromAuthority: ownerAddress,
                transferSolTo: ownerAddress,
                treasuryMsolAccount: marinadeState.treasuryMsolAccount,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
                msolTokenPartnerAccount: (yield this.getReferralStateData()).msolTokenPartnerAccount,
            })
                .instruction();
        });
        this.depositInstructionBuilder = ({ marinadeState, transferFrom, associatedMSolTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .deposit(amountLamports)
                .accountsStrict({
                reservePda: yield marinadeState.reserveAddress(),
                marinadeFinanceProgram: marinadeState.marinadeFinanceProgramId,
                referralState: (0, assert_1.assertNotNullAndReturn)(this.referralState, 'The referral code must be provided!'),
                state: marinadeState.marinadeStateAddress,
                msolMint: marinadeState.mSolMintAddress,
                msolMintAuthority: yield marinadeState.mSolMintAuthority(),
                liqPoolMsolLegAuthority: yield marinadeState.mSolLegAuthority(),
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                mintTo: associatedMSolTokenAccountAddress,
                transferFrom,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
                msolTokenPartnerAccount: (yield this.getReferralStateData()).msolTokenPartnerAccount,
            })
                .instruction();
        });
        this.depositStakeAccountInstructionBuilder = ({ marinadeState, duplicationFlag, ownerAddress, stakeAccountAddress, authorizedWithdrawerAddress, associatedMSolTokenAccountAddress, validatorIndex, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .depositStakeAccount(validatorIndex)
                .accountsStrict({
                duplicationFlag,
                stakeAuthority: authorizedWithdrawerAddress,
                state: marinadeState.marinadeStateAddress,
                marinadeFinanceProgram: marinadeState.marinadeFinanceProgramId,
                referralState: (0, assert_1.assertNotNullAndReturn)(this.referralState, 'The referral code must be provided!'),
                stakeList: marinadeState.state.stakeSystem.stakeList.account,
                stakeAccount: stakeAccountAddress,
                validatorList: marinadeState.state.validatorSystem.validatorList.account,
                msolMint: marinadeState.mSolMintAddress,
                msolMintAuthority: yield marinadeState.mSolMintAuthority(),
                mintTo: associatedMSolTokenAccountAddress,
                rentPayer: ownerAddress,
                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY,
                rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
                stakeProgram: util_1.STAKE_PROGRAM_ID,
                msolTokenPartnerAccount: (yield this.getReferralStateData()).msolTokenPartnerAccount,
            })
                .instruction();
        });
    }
    get program() {
        return new anchor_1.Program(MarinadeReferralIDL, this.programAddress, this.anchorProvider);
    }
    getReferralStateData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.referralStateData) {
                this.referralStateData = (yield this.marinade.getReferralPartnerState()).state;
            }
            return this.referralStateData;
        });
    }
}
exports.MarinadeReferralProgram = MarinadeReferralProgram;
//# sourceMappingURL=marinade-referral-program.js.map