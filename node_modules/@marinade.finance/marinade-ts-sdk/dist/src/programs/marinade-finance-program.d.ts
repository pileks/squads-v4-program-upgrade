import { BN, Program, web3, Provider, IdlTypes } from '@coral-xyz/anchor';
import { MarinadeState } from '../marinade-state/marinade-state';
import { TicketAccount } from '../marinade-state/borsh/ticket-account';
import * as mariandeFinance from './idl/types/marinade_finance';
type MarinadeFinance = mariandeFinance.MarinadeFinance;
export type MarinadeFinanceProgramType = Program<MarinadeFinance>;
export type ValidatorRecordAnchorType = IdlTypes<mariandeFinance.MarinadeFinance>['ValidatorRecord'];
export type StateRecordAnchorType = IdlTypes<mariandeFinance.MarinadeFinance>['StakeRecord'];
export declare class MarinadeFinanceProgram {
    readonly programAddress: web3.PublicKey;
    readonly anchorProvider: Provider;
    constructor(programAddress: web3.PublicKey, anchorProvider: Provider);
    get program(): MarinadeFinanceProgramType;
    getDelayedUnstakeTickets(beneficiary?: web3.PublicKey): Promise<Map<web3.PublicKey, TicketAccount>>;
    getEstimatedUnstakeTicketDueDate: (marinadeState: MarinadeState) => Promise<import("../util/ticket-date-info.types").TicketDateInfo>;
    addLiquidityInstructionBuilder: ({ marinadeState, ownerAddress, associatedLPTokenAccountAddress, amountLamports, }: {
        marinadeState: MarinadeState;
        ownerAddress: web3.PublicKey;
        associatedLPTokenAccountAddress: web3.PublicKey;
        amountLamports: BN;
    }) => Promise<web3.TransactionInstruction>;
    removeLiquidityInstructionBuilder: ({ marinadeState, ownerAddress, associatedLPTokenAccountAddress, associatedMSolTokenAccountAddress, amountLamports, }: {
        marinadeState: MarinadeState;
        ownerAddress: web3.PublicKey;
        associatedLPTokenAccountAddress: web3.PublicKey;
        associatedMSolTokenAccountAddress: web3.PublicKey;
        amountLamports: BN;
    }) => Promise<web3.TransactionInstruction>;
    liquidUnstakeInstructionBuilder: ({ marinadeState, ownerAddress, associatedMSolTokenAccountAddress, amountLamports, }: {
        marinadeState: MarinadeState;
        ownerAddress: web3.PublicKey;
        associatedMSolTokenAccountAddress: web3.PublicKey;
        amountLamports: BN;
    }) => Promise<web3.TransactionInstruction>;
    depositInstructionBuilder: ({ marinadeState, transferFrom, associatedMSolTokenAccountAddress, amountLamports, }: {
        marinadeState: MarinadeState;
        transferFrom: web3.PublicKey;
        associatedMSolTokenAccountAddress: web3.PublicKey;
        amountLamports: BN;
    }) => Promise<web3.TransactionInstruction>;
    depositStakeAccountInstructionBuilder: ({ marinadeState, duplicationFlag, ownerAddress, stakeAccountAddress, authorizedWithdrawerAddress, associatedMSolTokenAccountAddress, validatorIndex, }: {
        marinadeState: MarinadeState;
        duplicationFlag: web3.PublicKey;
        ownerAddress: web3.PublicKey;
        stakeAccountAddress: web3.PublicKey;
        authorizedWithdrawerAddress: web3.PublicKey;
        associatedMSolTokenAccountAddress: web3.PublicKey;
        validatorIndex: number;
    }) => Promise<web3.TransactionInstruction>;
    claimInstructionBuilder: ({ marinadeState, ticketAccount, transferSolTo, }: {
        marinadeState: MarinadeState;
        ticketAccount: web3.PublicKey;
        transferSolTo: web3.PublicKey;
    }) => Promise<web3.TransactionInstruction>;
    orderUnstakeInstructionBuilder: ({ marinadeState, ownerAddress, associatedMSolTokenAccountAddress, newTicketAccount, msolAmount, }: {
        marinadeState: MarinadeState;
        ownerAddress: web3.PublicKey;
        associatedMSolTokenAccountAddress: web3.PublicKey;
        newTicketAccount: web3.PublicKey;
        msolAmount: BN;
    }) => Promise<web3.TransactionInstruction>;
}
export {};
