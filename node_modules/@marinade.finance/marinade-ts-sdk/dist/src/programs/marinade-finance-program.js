"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarinadeFinanceProgram = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const util_1 = require("../util");
const spl_token_3_x_1 = require("@solana/spl-token-3.x");
const mariandeFinance = __importStar(require("./idl/types/marinade_finance"));
const MarinadeFinanceIDL = mariandeFinance.IDL;
class MarinadeFinanceProgram {
    constructor(programAddress, anchorProvider) {
        this.programAddress = programAddress;
        this.anchorProvider = anchorProvider;
        // Estimate due date if a ticket would be created right now
        this.getEstimatedUnstakeTicketDueDate = (marinadeState) => __awaiter(this, void 0, void 0, function* () {
            const epochInfo = yield (0, util_1.getEpochInfo)(this.anchorProvider.connection);
            return (0, util_1.estimateTicketDateInfo)(epochInfo, Date.now(), marinadeState.state.stakeSystem.slotsForStakeDelta.toNumber());
        });
        this.addLiquidityInstructionBuilder = ({ marinadeState, ownerAddress, associatedLPTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .addLiquidity(amountLamports)
                .accountsStrict({
                state: marinadeState.marinadeStateAddress,
                lpMint: marinadeState.lpMintAddress,
                lpMintAuthority: yield marinadeState.lpMintAuthority(),
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                transferFrom: ownerAddress,
                mintTo: associatedLPTokenAccountAddress,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
            })
                .instruction();
        });
        this.removeLiquidityInstructionBuilder = ({ marinadeState, ownerAddress, associatedLPTokenAccountAddress, associatedMSolTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .removeLiquidity(amountLamports)
                .accountsStrict({
                state: marinadeState.marinadeStateAddress,
                lpMint: marinadeState.lpMintAddress,
                burnFrom: associatedLPTokenAccountAddress,
                burnFromAuthority: ownerAddress,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                transferSolTo: ownerAddress,
                transferMsolTo: associatedMSolTokenAccountAddress,
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolMsolLegAuthority: yield marinadeState.mSolLegAuthority(),
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
            })
                .instruction();
        });
        this.liquidUnstakeInstructionBuilder = ({ marinadeState, ownerAddress, associatedMSolTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .liquidUnstake(amountLamports)
                .accountsStrict({
                state: marinadeState.marinadeStateAddress,
                msolMint: marinadeState.mSolMintAddress,
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                getMsolFrom: associatedMSolTokenAccountAddress,
                getMsolFromAuthority: ownerAddress,
                transferSolTo: ownerAddress,
                treasuryMsolAccount: marinadeState.treasuryMsolAccount,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
            })
                .instruction();
        });
        this.depositInstructionBuilder = ({ marinadeState, transferFrom, associatedMSolTokenAccountAddress, amountLamports, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .deposit(amountLamports)
                .accountsStrict({
                reservePda: yield marinadeState.reserveAddress(),
                state: marinadeState.marinadeStateAddress,
                msolMint: marinadeState.mSolMintAddress,
                msolMintAuthority: yield marinadeState.mSolMintAuthority(),
                liqPoolMsolLegAuthority: yield marinadeState.mSolLegAuthority(),
                liqPoolMsolLeg: marinadeState.mSolLeg,
                liqPoolSolLegPda: yield marinadeState.solLeg(),
                mintTo: associatedMSolTokenAccountAddress,
                transferFrom,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
            })
                .instruction();
        });
        this.depositStakeAccountInstructionBuilder = ({ marinadeState, duplicationFlag, ownerAddress, stakeAccountAddress, authorizedWithdrawerAddress, associatedMSolTokenAccountAddress, validatorIndex, }) => __awaiter(this, void 0, void 0, function* () {
            return this.program.methods
                .depositStakeAccount(validatorIndex)
                .accountsStrict({
                duplicationFlag,
                stakeAuthority: authorizedWithdrawerAddress,
                state: marinadeState.marinadeStateAddress,
                stakeList: marinadeState.state.stakeSystem.stakeList.account,
                stakeAccount: stakeAccountAddress,
                validatorList: marinadeState.state.validatorSystem.validatorList.account,
                msolMint: marinadeState.mSolMintAddress,
                msolMintAuthority: yield marinadeState.mSolMintAuthority(),
                mintTo: associatedMSolTokenAccountAddress,
                rentPayer: ownerAddress,
                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY,
                rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
                stakeProgram: util_1.STAKE_PROGRAM_ID,
            })
                .instruction();
        });
        this.claimInstructionBuilder = ({ marinadeState, ticketAccount, transferSolTo, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .claim()
                .accountsStrict({
                state: marinadeState.marinadeStateAddress,
                reservePda: yield marinadeState.reserveAddress(),
                ticketAccount,
                transferSolTo,
                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY,
                systemProgram: util_1.SYSTEM_PROGRAM_ID,
            })
                .instruction();
        });
        this.orderUnstakeInstructionBuilder = ({ marinadeState, ownerAddress, associatedMSolTokenAccountAddress, newTicketAccount, msolAmount, }) => __awaiter(this, void 0, void 0, function* () {
            return yield this.program.methods
                .orderUnstake(msolAmount)
                .accountsStrict({
                state: marinadeState.marinadeStateAddress,
                msolMint: marinadeState.mSolMintAddress,
                burnMsolFrom: associatedMSolTokenAccountAddress,
                burnMsolAuthority: ownerAddress,
                newTicketAccount,
                rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY,
                tokenProgram: spl_token_3_x_1.TOKEN_PROGRAM_ID,
            })
                .instruction();
        });
    }
    get program() {
        return new anchor_1.Program(MarinadeFinanceIDL, this.programAddress, this.anchorProvider);
    }
    getDelayedUnstakeTickets(beneficiary) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = [
                {
                    dataSize: 88,
                },
            ];
            if (beneficiary) {
                filters.push({
                    memcmp: {
                        offset: 8 + 32,
                        bytes: beneficiary.toBase58(),
                    },
                });
            }
            const ticketAccounts = yield this.program.account.ticketAccountData.all(filters);
            const epochInfo = yield (0, util_1.getEpochInfo)(this.anchorProvider.connection);
            return new Map(ticketAccounts.map(ticketAccount => {
                const ticketAccountdata = ticketAccount.account;
                const ticketAcconuntPubkey = ticketAccount.publicKey;
                const ticketDateInfo = (0, util_1.getTicketDateInfo)(epochInfo, ticketAccountdata.createdEpoch.toNumber(), Date.now());
                return [
                    ticketAcconuntPubkey,
                    Object.assign(Object.assign({}, ticketAccountdata), ticketDateInfo),
                ];
            }));
        });
    }
}
exports.MarinadeFinanceProgram = MarinadeFinanceProgram;
//# sourceMappingURL=marinade-finance-program.js.map