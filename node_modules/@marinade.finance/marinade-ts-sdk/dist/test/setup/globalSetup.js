"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@coral-xyz/anchor");
const TestWorld = __importStar(require("../test-world"));
const src_1 = require("../../src");
require('ts-node/register');
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    // --- GETTING VOTE ACCOUNT of solana-test-validator ---
    // as there is only solana-test-validator, it's a single vote account in the test network
    const votePubkey = yield TestWorld.getSolanaTestValidatorVoteAccountPubkey();
    // --- CREATING STAKE ACCOUNT and DELEGATE ---
    yield createAndDelegateStake(TestWorld.STAKE_ACCOUNT, votePubkey);
    yield createAndDelegateStake(TestWorld.STAKE_ACCOUNT_TO_WITHDRAW, votePubkey);
    // --- WAITING FOR STAKE ACCOUNT to be READY ---
    const stakeAccounts = [
        TestWorld.STAKE_ACCOUNT.publicKey,
        TestWorld.STAKE_ACCOUNT_TO_WITHDRAW.publicKey,
    ];
    const startTime = Date.now();
    console.log(`Waiting for stake accounts ${stakeAccounts
        .map(sa => sa.toBase58())
        .join(', ')} to be activated`);
    for (const stakeAccountToWait of stakeAccounts) {
        yield TestWorld.waitForStakeAccountActivation({
            stakeAccount: stakeAccountToWait,
            connection: TestWorld.CONNECTION,
        });
    }
    console.log(`Stake account(s) ${stakeAccounts.map(sa => sa.toBase58())} are activated after ${(Date.now() - startTime) / 1000} s`);
    // --- ADDING solana-test-validator under MARINADE ---
    const config = new src_1.MarinadeConfig({
        connection: TestWorld.CONNECTION,
        publicKey: TestWorld.SDK_USER.publicKey,
    });
    const marinade = new src_1.Marinade(config);
    const marinadeState = yield marinade.getMarinadeState();
    if (!marinadeState.state.validatorSystem.managerAuthority.equals(TestWorld.MARINADE_STATE_ADMIN.publicKey)) {
        throw new Error('Jest global setup error: Marinade state expected to be configured with the TestWorld admin authority.');
    }
    // check if the validator is part of Marinade already
    const validators = yield marinadeState.getValidatorRecords();
    if (validators.validatorRecords.findIndex(v => v.validatorAccount.toBase58() === votePubkey.toBase58()) === -1) {
        console.log(`Validator vote account ${votePubkey.toBase58()} is not part of Marinade yet, adding it.`);
        const addIx = yield TestWorld.addValidatorInstructionBuilder({
            marinade,
            validatorScore: 1000,
            rentPayer: TestWorld.PROVIDER.wallet.publicKey,
            validatorVote: votePubkey,
        });
        const addTx = new anchor_1.web3.Transaction().add(addIx);
        yield TestWorld.PROVIDER.sendAndConfirm(addTx, [
            TestWorld.MARINADE_STATE_ADMIN,
        ]);
    }
});
function createAndDelegateStake(stakeAccountKeypair, votePubkey, lamports = 42 * anchor_1.web3.LAMPORTS_PER_SOL) {
    return __awaiter(this, void 0, void 0, function* () {
        // create a stake account that will be used later in all tests
        const tx = new anchor_1.web3.Transaction();
        const ixStakeAccount = anchor_1.web3.StakeProgram.createAccount({
            authorized: {
                staker: TestWorld.PROVIDER.wallet.publicKey,
                withdrawer: TestWorld.PROVIDER.wallet.publicKey,
            },
            fromPubkey: TestWorld.PROVIDER.wallet.publicKey,
            lamports,
            stakePubkey: stakeAccountKeypair.publicKey,
        });
        tx.add(ixStakeAccount);
        /// delegating stake account to the vote account
        const ixDelegate = anchor_1.web3.StakeProgram.delegate({
            authorizedPubkey: TestWorld.PROVIDER.wallet.publicKey,
            stakePubkey: stakeAccountKeypair.publicKey,
            votePubkey,
        });
        tx.add(ixDelegate);
        yield TestWorld.PROVIDER.sendAndConfirm(tx, [stakeAccountKeypair]);
        const stakeBalance = yield TestWorld.CONNECTION.getBalance(stakeAccountKeypair.publicKey);
        yield TestWorld.CONNECTION.getAccountInfo(stakeAccountKeypair.publicKey);
        if (!stakeBalance) {
            throw new Error(`Jest setup error: no balance of stake account ${stakeAccountKeypair.publicKey.toBase58()}`);
        }
    });
}
//# sourceMappingURL=globalSetup.js.map