/// <reference types="bn.js" />
import { AnchorProvider, BN, web3 } from '@coral-xyz/anchor';
import { Marinade } from '../src';
import { Signer } from '@solana/web3.js';
export declare const MINIMUM_LAMPORTS_BEFORE_TEST: BN;
export declare const LAMPORTS_AIRDROP_CAP: BN;
export declare const STAKE_ACCOUNT: web3.Keypair;
export declare const STAKE_ACCOUNT_TO_WITHDRAW: web3.Keypair;
export declare const SDK_USER: web3.Keypair;
export declare const MARINADE_STATE_ADMIN: web3.Keypair;
export declare const PROVIDER_URL_DEVNET = "https://api.devnet.solana.com";
export declare const CONNECTION_DEVNET: web3.Connection;
export declare const PROVIDER_URL = "http://localhost:8899";
export declare const CONNECTION: web3.Connection;
export declare const PROVIDER: AnchorProvider;
export declare const REFERRAL_CODE: web3.PublicKey;
export declare const PARTNER_NAME = "marinade_ts_sdk";
export declare function airdrop(to: web3.PublicKey, amountLamports: number): Promise<void>;
export declare const getBalanceLamports: (account: web3.PublicKey) => Promise<number>;
export declare function airdropMinimumLamportsBalance(account: web3.PublicKey, minimumLamportsBalance: BN): Promise<void>;
export declare function transferMinimumLamportsBalance(address: web3.PublicKey, provider?: AnchorProvider, lamports?: BN): Promise<string>;
export declare function simulateTransaction(transaction: web3.Transaction): Promise<{
    executedSlot: number;
    blockhash: string;
    simulatedSlot: number;
    err: web3.TransactionError | null;
    logs: string[] | null;
    unitsConsumed: number | undefined;
    accounts: (web3.SimulatedTransactionAccountInfo | null)[] | null | undefined;
    returnData: web3.TransactionReturnData | null | undefined;
}>;
export declare function executeTransaction(transaction: web3.Transaction, signers?: Signer[]): Promise<{
    executedSlot: number;
    blockhash: string;
    executionSlot: number;
    err: web3.TransactionError | null;
    logs: string[] | null | undefined;
    unitsConsumed: number | undefined;
    accounts: web3.ParsedMessageAccount[];
}>;
export declare function getSolanaTestValidatorVoteAccountPubkey(): Promise<web3.PublicKey>;
export declare function waitForStakeAccountActivation({ stakeAccount, connection, timeoutSeconds, activatedAtLeastFor, }: {
    stakeAccount?: web3.PublicKey;
    connection?: web3.Connection;
    timeoutSeconds?: number;
    activatedAtLeastFor?: number;
}): Promise<void>;
export declare const sleep: (ms: number) => Promise<unknown>;
export declare function addValidatorInstructionBuilder({ marinade, validatorScore, validatorVote, rentPayer, }: {
    marinade: Marinade;
    validatorScore: number;
    validatorVote: web3.PublicKey;
    rentPayer: web3.PublicKey;
}): Promise<web3.TransactionInstruction>;
