"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAuthorizeStakerInstructions = exports.formatStakeDistribution = exports.getFutureStakeDistribution = exports.filterReadyToRevoke = exports.getStakeAccounts = exports.lamportsToSol = exports.tokenBalanceToNumber = exports.withDecimalPoint = void 0;
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const SOL_DECIMALS = 9;
const U64_MAX = '18446744073709551615';
const withDecimalPoint = (bn, decimals) => {
    const s = bn.toString().padStart(decimals + 1, '0');
    const l = s.length;
    return s.slice(0, l - decimals) + '.' + s.slice(-decimals);
};
exports.withDecimalPoint = withDecimalPoint;
const tokenBalanceToNumber = (bn, decimals) => (0, exports.withDecimalPoint)(bn, decimals);
exports.tokenBalanceToNumber = tokenBalanceToNumber;
const lamportsToSol = (bn) => (0, exports.tokenBalanceToNumber)(bn, SOL_DECIMALS);
exports.lamportsToSol = lamportsToSol;
const getStakeAccounts = (connection, withdrawAuthority, stakeAuthority) => __awaiter(void 0, void 0, void 0, function* () {
    if (!stakeAuthority && !withdrawAuthority) {
        throw new Error('At least one authority must be provided');
    }
    const filters = [];
    if (stakeAuthority) {
        filters.push({
            memcmp: {
                bytes: stakeAuthority.toBase58(),
                offset: 4 + 8
            }
        });
    }
    if (withdrawAuthority) {
        filters.push({
            memcmp: {
                bytes: withdrawAuthority.toBase58(),
                offset: 4 + 8 + 32
            }
        });
    }
    const stakeAccounts = yield connection.getParsedProgramAccounts(web3_js_1.StakeProgram.programId, { filters });
    return stakeAccounts;
});
exports.getStakeAccounts = getStakeAccounts;
const filterReadyToRevoke = (epoch, account) => {
    var _a, _b, _c;
    const delegation = (_c = (_b = (_a = account.data.parsed) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.stake) === null || _c === void 0 ? void 0 : _c.delegation;
    if (!delegation) {
        return true;
    }
    const activating = delegation.activationEpoch === epoch.toString();
    const deactivating = delegation.deactivationEpoch === epoch.toString();
    const deactivated = !deactivating && U64_MAX !== delegation.deactivationEpoch;
    return activating || deactivated;
};
exports.filterReadyToRevoke = filterReadyToRevoke;
const getFutureStakeDistribution = (connection, withdrawAuthority, stakeAuthority) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const stakeAccounts = yield (0, exports.getStakeAccounts)(connection, withdrawAuthority, stakeAuthority);
    const currentEpoch = (yield connection.getEpochInfo()).epoch;
    const validatorsDelegation = {};
    const NONE = 'NONE';
    const allValidators = [];
    for (const { account } of stakeAccounts) {
        const validator = (_d = (_c = (_b = (_a = account.data.parsed) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.stake) === null || _c === void 0 ? void 0 : _c.delegation) === null || _d === void 0 ? void 0 : _d.voter;
        if (validator) {
            allValidators.push(validator);
        }
    }
    allValidators.sort();
    for (const validator of [NONE, ...allValidators]) {
        validatorsDelegation[validator] = { balance: new bn_js_1.default(0), stake: new bn_js_1.default(0) };
    }
    for (const { account: { data: { parsed }, lamports }, pubkey } of stakeAccounts) {
        const delegation = (_f = (_e = parsed === null || parsed === void 0 ? void 0 : parsed.info) === null || _e === void 0 ? void 0 : _e.stake) === null || _f === void 0 ? void 0 : _f.delegation;
        const balance = new bn_js_1.default(lamports.toString());
        if (delegation) {
            const stake = new bn_js_1.default(delegation.stake);
            const deactivating = delegation.deactivationEpoch === currentEpoch.toString();
            const activating = delegation.activationEpoch === currentEpoch.toString() && !deactivating;
            const deactivated = !deactivating && U64_MAX !== delegation.deactivationEpoch;
            const fullyActivatedAndNotDeactivating = !activating && !deactivating && !deactivated;
            const validator = delegation.voter;
            if (fullyActivatedAndNotDeactivating) {
                validatorsDelegation[validator].balance = validatorsDelegation[validator].balance.add(balance);
                validatorsDelegation[validator].stake = validatorsDelegation[validator].stake.add(stake);
            }
            else if (activating) {
                validatorsDelegation[validator].balance = validatorsDelegation[validator].balance.add(balance);
                validatorsDelegation[validator].stake = validatorsDelegation[validator].stake.add(stake);
            }
            else if (deactivating) {
                validatorsDelegation[NONE].balance = validatorsDelegation[NONE].balance.add(balance);
            }
            else if (deactivated) {
                validatorsDelegation[NONE].balance = validatorsDelegation[NONE].balance.add(balance);
            }
        }
        else {
            validatorsDelegation[NONE].balance = validatorsDelegation[NONE].balance.add(balance);
        }
    }
    return { validatorsDelegation };
});
exports.getFutureStakeDistribution = getFutureStakeDistribution;
const formatStakeDistribution = (stakeDistribution) => {
    const lines = [];
    const PAD_SOL = 16;
    const PAD_VALIDATOR = 44;
    const stakeDistributionArr = Object.entries(stakeDistribution.validatorsDelegation);
    stakeDistributionArr.sort(([validatorA, stakesA], [validatorB, stakesB]) => {
        const balanceCmp = stakesB.balance.cmp(stakesA.balance);
        if (balanceCmp !== 0) {
            return balanceCmp;
        }
        const stakeCmp = stakesB.stake.cmp(stakesA.stake);
        if (stakeCmp !== 0) {
            return stakeCmp;
        }
        return validatorA.localeCompare(validatorB);
    });
    for (const [validator, { balance, stake }] of stakeDistributionArr) {
        lines.push(`${validator.padEnd(PAD_VALIDATOR)} balance: ${(0, exports.lamportsToSol)(balance).padStart(PAD_SOL)} stake: ${(0, exports.lamportsToSol)(stake).padStart(PAD_SOL)}`);
    }
    return lines.join('\n');
};
exports.formatStakeDistribution = formatStakeDistribution;
const buildAuthorizeStakerInstructions = (stakeAccounts, authorizedPubkey, stakeAuthority) => stakeAccounts.flatMap((stakePubkey) => web3_js_1.StakeProgram.authorize({
    stakePubkey,
    authorizedPubkey,
    newAuthorizedPubkey: stakeAuthority,
    stakeAuthorizationType: { index: 0 },
}).instructions);
exports.buildAuthorizeStakerInstructions = buildAuthorizeStakerInstructions;
//# sourceMappingURL=utils.js.map