import { Keypair, PublicKey, TransactionInstruction, VersionedTransaction } from "@solana/web3.js";
import BN from 'bn.js';
import { NativeStakingConfig } from "./config";
import { ClaimExtraBalanceOrderMessage, ExitMessage, FragmentedRebalanceOrderMessage, MergeOrderMessage, RebalanceOrderMessage, ResetUndelegatedMessage, SoftMergeOrderMessage } from "./messages";
import { StakeDistribution } from "./utils";
export declare class NativeStakingSDK {
    private readonly config;
    constructor(config?: NativeStakingConfig);
    buildReferralInstructions(code: PublicKey): {
        referralInstructions: TransactionInstruction[];
    };
    buildCreateAuthorizedStakeInstructions(user: PublicKey, amount: BN, stakeKeypair?: Keypair): {
        createAuthorizedStake: TransactionInstruction[];
        stakeKeypair: Keypair;
    };
    buildAuthorizeInstructions(user: PublicKey, stakeAccounts: PublicKey[]): TransactionInstruction[];
    initPrepareForRevoke(user: PublicKey, amount?: BN): Promise<{
        payFees: TransactionInstruction[];
        onPaid: (signature: string) => Promise<any>;
    }>;
    callPrepareForRevoke(user: PublicKey, signature: string, amount?: BN): Promise<any>;
    callRebalanceHint(user: PublicKey): Promise<any>;
    fetchRewards(user: PublicKey): Promise<RewardsResponse>;
    buildRevokeInstructions(user: PublicKey, stakeAccounts: PublicKey[]): TransactionInstruction[];
    getRefSolSignedTransaction: (user: PublicKey, amount: BN, code: string) => Promise<VersionedTransaction>;
    getRefStakeAccountSignedTransaction: (user: PublicKey, stakeAccount: PublicKey, code: string) => Promise<VersionedTransaction>;
    getStakeAccounts: (user: PublicKey) => Promise<{
        all: {
            pubkey: PublicKey;
            account: import("@solana/web3.js").AccountInfo<import("@solana/web3.js").ParsedAccountData>;
        }[];
        staking: {
            pubkey: PublicKey;
            account: import("@solana/web3.js").AccountInfo<import("@solana/web3.js").ParsedAccountData>;
        }[];
        preparingToRevoke: {
            pubkey: PublicKey;
            account: import("@solana/web3.js").AccountInfo<import("@solana/web3.js").ParsedAccountData>;
        }[];
        readyToRevoke: {
            pubkey: PublicKey;
            account: import("@solana/web3.js").AccountInfo<import("@solana/web3.js").ParsedAccountData>;
        }[];
    }>;
    getFutureStakeDistribution: (user?: PublicKey | null) => Promise<{
        stake: StakeDistribution;
        exit: StakeDistribution;
    }>;
    getFutureStakeDistributionPretty: (user?: PublicKey | null) => Promise<string>;
    buildRebalanceOrderMessage: (withdrawAuthority: PublicKey, meta?: string) => RebalanceOrderMessage;
    buildRebalanceOrderWithReserveMessage: (withdrawAuthority: PublicKey, reserve?: string, meta?: string) => RebalanceOrderMessage;
    buildFragmentedRebalanceOrderMessage: (withdrawAuthority: PublicKey, stakeFragmentSizeBps: number) => FragmentedRebalanceOrderMessage;
    buildRebalanceOrderWithProxyMessage: (withdrawAuthority: PublicKey, root: PublicKey, operator: PublicKey) => RebalanceOrderMessage;
    buildMergeOrderMessage: (withdrawAuthority: PublicKey, meta?: string) => MergeOrderMessage;
    buildMergeOrderWithReserveMessage: (withdrawAuthority: PublicKey, reserve?: string, meta?: string) => MergeOrderMessage;
    buildSoftMergeOrderMessage: (withdrawAuthority: PublicKey, maxStakeFragmentSizeBps: number) => SoftMergeOrderMessage;
    buildResetUndelegatedAccountsMessage: (withdrawAuthority: PublicKey, validator: PublicKey) => ResetUndelegatedMessage;
    buildMergeOrderWithProxyMessage: (withdrawAuthority: PublicKey, root: PublicKey, operator: PublicKey, meta?: string) => MergeOrderMessage;
    buildClaimExtraBalanceOrderMessage: (withdrawAuthority: PublicKey, meta?: string) => ClaimExtraBalanceOrderMessage;
    buildExitAllOrderMessage: (withdrawAuthority: PublicKey, payment: string, meta?: string) => ExitMessage;
    buildExitPartOrderMessage: (withdrawAuthority: PublicKey, amount: BN, payment: string, meta?: string) => ExitMessage;
    buildExitPartOrderWithProxyMessage: (withdrawAuthority: PublicKey, amount: BN, payment: string, root: PublicKey, operator: PublicKey, meta?: string) => ExitMessage;
}
export type RewardsResponse = {
    data_points: {
        epoch: number;
        balance: string;
        inflation_rewards: string;
        created_at: string;
    }[];
    apy_5_epochs: number;
};
