import { TransactionEnvelope } from '@saberhq/solana-contrib';
import { PublicKey, Signer } from '@solana/web3.js';
import { DirectedStakeSDK, DirectedStakeRoot, DirectedStakeProgram, VoteRecord } from './sdk';
import { ProgramAccount } from '@coral-xyz/anchor';
import { AugmentedProvider } from '@saberhq/solana-contrib';
/**
 * Wrapper around the directed stake accounts.
 */
export declare class DirectStakeRootWrapper {
    readonly sdk: DirectedStakeSDK;
    readonly address: PublicKey;
    data: DirectedStakeRoot;
    private constructor();
    get provider(): AugmentedProvider;
    get program(): DirectedStakeProgram;
    /**
     * Getting data of the directed stake root account.
     */
    static loadData({ sdk, address, }: {
        sdk: DirectedStakeSDK;
        address: PublicKey;
    }): Promise<DirectedStakeRoot>;
    static fromData({ sdk, address, data, }: {
        sdk: DirectedStakeSDK;
        address: PublicKey;
        data: DirectedStakeRoot;
    }): Promise<DirectStakeRootWrapper>;
    /**
     * When ProposalTemplateWrapper is not found in the sdk registry,
     * fetching data from cluster and ProposalTemplateWrapper.
     */
    static load({ sdk, address, }: {
        sdk: DirectedStakeSDK;
        address: PublicKey;
    }): Promise<DirectStakeRootWrapper>;
    /**
     * Fetching new state from the cluster.
     */
    reload(): Promise<DirectedStakeRoot>;
    static calculateVoteRecordAddress({ directedStakeProgramId, root, owner, }: {
        directedStakeProgramId: PublicKey;
        root: PublicKey;
        owner: PublicKey;
    }): [PublicKey, number];
    static voteRecordAddress({ sdk, root, owner, }: {
        sdk: DirectedStakeSDK;
        root: PublicKey;
        owner: PublicKey;
    }): [PublicKey, number];
    getVoteRecordAddress(owner: PublicKey): PublicKey;
    static getVoteRecord({ sdk, address, }: {
        sdk: DirectedStakeSDK;
        address: PublicKey;
    }): Promise<VoteRecord>;
    getVoteRecord(owner: PublicKey): Promise<{
        address: PublicKey;
        data: VoteRecord;
    }>;
    /**
     * Creating a new directed stake root and registering it to SDK registry.
     */
    static create({ sdk, rootAddress, rentPayer, }: {
        sdk: DirectedStakeSDK;
        rootAddress?: PublicKey | Signer;
        rentPayer?: Signer | PublicKey;
    }): Promise<{
        tx: TransactionEnvelope;
        wrapper: DirectStakeRootWrapper;
    }>;
    createVoteRecord({ owner, rentPayer, validatorVote, }: {
        owner?: PublicKey | Signer;
        rentPayer?: PublicKey | Signer;
        validatorVote: PublicKey;
    }): Promise<{
        tx: TransactionEnvelope;
        address: PublicKey;
    }>;
    /**
     * Updating an existing directed stake vote account for the root and owner,
     * changing the registered validator vote account public key within it.
     */
    updateVoteRecord({ owner, validatorVote, }: {
        owner?: PublicKey | Signer;
        validatorVote: PublicKey;
    }): Promise<{
        tx: TransactionEnvelope;
        address: PublicKey;
    }>;
    /**
     * Removing a directed stake vote account for the root and owner.
     */
    removeVoteRecord({ owner, rentCollector, }: {
        owner?: PublicKey | Signer;
        rentCollector?: PublicKey;
    }): Promise<{
        tx: TransactionEnvelope;
        address: PublicKey;
    }>;
    findVoteRecords(): Promise<ProgramAccount<VoteRecord>[]>;
}
